# Notes of advanced programming (C++)

const (constant) usage for pointer and reference:
=================================================
- If integer is const, both reference and pointer also has to be const. e.g:
	const int MAX = 100;
	int* p1 = &MAX; // Compilation error
	const int* p1 = &MAX; // OK
	int& r1 = &MAX; // Compilation error
	const int& r1 = &MAX; // OK



Pointer:
--------
int* - pointer to int     
int const * - pointer to const int     
int * const - const pointer to int     
int const * const - const pointer to const int  

Now the first const can be on either side of the type so:      
const int * == int const *     
const int * const == int const * const


Reference:
----------
- Reference can only be set to constant data type or in 
otherwords make the data pointed to by reference read only 
when accessed by that particular reference variable:
	int x = 10;
	const int& ref = x; 
	int& const ref = x; // This is not allowed

- member functions should be set to const if it operates 
on const objects of the class otherwise compiler will 
complain
	e.g: 	int Time:getHour() const

- compiler will only allow const functions to be called 
on const objects




Copy Constructor:
=================
- A Constructor is copy Constructor if it's first parameter 
is a reference to a class type and any additional parameters 
have default values.

- The parameter must always be a reference to a const

E.g:
class Foo {
	public:
		Foo(); // default Constructor
		Foo(const Foo&); // copy constructor
}


Arrays
======

- size fixed at compile time
- arrays can not be assigned
- arrays of references not allowed
- functions cannot return arrays

Use c library for manipulating strings <cstring>
================================================


- size_t is used to specify size in parameters of functions 
or anything that has to do with size.

- "const int [] scores" and "const int* scores" mean the 
same thing, underneath the compiler changes array to pointer format.

- const char* menu[4] = {"chicken", "beef", "salmon", "lamb"}
  ^ above code means it's an array of 4 character pointers

- Lifetime of global and local variables are stored in stack
- Scope of global variable is accessible from anywhere and 
for local variable it's limited to the scope of the function where 
its declared.

- Global variables are stored in data segment and local 
variables are stored in stack segment

- When new fails to get memory it returns NULL (in C) 
and bad_alloc (in c++)

- When an array of memory has been allocated on the heap
use 'delete [] variablename' to delete cleanly 
by calling destructor of the object.

- Copy constructor: When we need to create and initialize 
an object according to some given object.

- Inline functions are declared to reduce overhead, to reduce 
the penalty of function call. Recursive functions can not be inline.

- Const member functions can only be called on const objects 
and compiler will not allow non const member functions to be 
called on const objects.

- Every member function that doesn't modify the values in an 
object should be declared as const. e.g: getName(), getID(), etc.


Functors and function pointers
==============================
- Main reason to use functors instead of functions pointers 
  is because in the case of functors the state is maintained so
  whatever is passed in can be later used.

- Efficieny, cos functors can be inlined by making operator()
function to be inline

Global Functions:
=================
- We can make some functions like comparison functions '==',
'!=', etc. global so that we can take advantage of implicit
conversions.

- We can also define constructors accepting single argument
that converts objects to our own type which can be used in 
conjunction with implicit conversions in global functions

For example If we compare 2 objects, let's say a string and 
a pointer to a c-style string, and if the comparison operators
are global the compiler would automatically convert the 
c-style string to a string object as long as there are such
user defined functions available in order to make that conversion



We hide constructors of iterator by making it private so that
only the classes that have friendship declared on interator class itself
can access it

According to convention if it is post increment or decrement the compiler 
will pass integer value therefore we use class::operator++(int) signature
to distinguish between pre and post increment/decrement. Note the integer
that has been passed. We don't make any use of it but it has been defined 
as part of standard.

For ROIterator we do not make constructor accepting single parameter as explicit
because we want to allow automatic conversions from RWIterator to ROIterator
This is specifically useful when making use of comparison operators that are made
global so that the types are automatically converted from RWIterator to ROIterator 
and makes comparison appropriately

- Use name in prototype to make interface specification clear.
    For example: void DArray(size_t inputSize);

- If we make use of template and pass 2 or more type parameters we need to specify 
our assumption in precondition section to clarify further

- If we pass pointer * in functions its just passing a copy of the pointer, and if 
we pass pointer as reference we are actually sending the exact pointer
